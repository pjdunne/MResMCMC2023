import numpy as np
import matplotlib.pyplot as plt
    

def auto_correlation(thetas, time_lag):
    
    """
    
    calculating the auto-correlation of the stochastic processes of parameter theta

    Arguments
    ---------
    theta : the inputed value of the parameter theta generated by the stochastic process
    time_lag : the value of the time-lag of the of the auto-correlation

    Returns
    -------
    auto_corr : the auto-correlation value of the inputed parameters

    """

    thetas = np.asarray(thetas)
    if len((thetas.shape))==1:
        thetas = np.expand_dims(thetas, axis=1)
    (m, n) = thetas.shape
    thetas_stds_pro = (np.std(thetas[0: m-time_lag], axis=0)*np.std(thetas[time_lag: m], axis=0))
    auto_corr = []
    for i, thetai_stds_pro in enumerate(thetas_stds_pro):
        if thetai_stds_pro==0:
            auto_corr.append(0)
        else:
            theta1 = thetas[0: m-time_lag, i]
            theta2 = thetas[time_lag: m, i]
            auto_corr.append((np.mean(theta1*theta2) - np.mean(theta1)*np.mean(theta2))/thetai_stds_pro)
    return np.asarray(auto_corr)


def ESS(thetas):

    """
    
    Calculating the Effective Sample Size(ESS) of the inputed data 

    Arguments
    ---------
    thetas : the inputed value of the parameter theta generated by the stochastic precess

    Returns
    -------
    res : the Effective Sample Szie of inputed data
    
    """

    thetas =np.asarray(thetas)
    if len(thetas.shape)==1:
        thetas = np.expand_dims(thetas, axis=1)
    # Computing the autocorrelation function
    (m, n) = thetas.shape
    acf = np.asarray([auto_correlation(thetas=thetas, time_lag=t) for t in range(0, m)])
    # Computing the integrated autocorrelation tine
    iact = 1.0
    for t in range(1, len(acf)):
        for i in range(0, n):
            if acf[t, i]<0:
                acf[:, i] = 0
        iact += 2.0*acf[t]
    n = len(thetas)
    return n/iact

def auto_corr_plot(thetas, plot_nth_theta, theta_index, plot_together=True, figsize=(10, 10)):
    """
    
    plot the auto-correlation of each time_lag

    Arguments
    ---------
    thetas (List[List[float]]): the value of the the parameters 
    plot_nth_theta (List[int]): the dimensions want to plot with the function
    theta_index (List[]): the indexes of different dimension parameters 
    plot_together (bool): deciding whether to plot all plots of auto-correlation together
    figsize : the figure size of the plots

    Returns
    -------
    None

    """

    thetas = np.asarray(thetas)
    if len(thetas.shape)==1:
        thetas = np.expand_dims(thetas,axis=1)
    m = thetas.shape[0] # the data size of the inputed thetas and the dimension of the datas
    plt.rcParams["figure.figsize"] = figsize
    for i in plot_nth_theta:
        theta_i = thetas[:, i]
        acf = np.asarray([auto_correlation(thetas=theta_i, time_lag=t)[0] for t in range(0, m-1)])
        plt.plot(np.asarray(range(0, m-1)), acf, label=f"The auto-correlation value of {theta_index[i]}")
        if not(plot_together):
            plt.legend()
            plt.xlabel("Time Lag Value")
            plt.ylabel("Auto-Correlation Value")
            plt.show()

    if plot_together:
        plt.legend()
        plt.xlabel("Time Lag Value")
        plt.ylabel("Auto-Correlation Value")
        plt.show()